{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPfKgTBZQkOYVmFlKgO2HKV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303A510J6AIML/2303A510J6AIML/blob/main/2303A510j6_batch_04%2C_Q_12.ipynb%20practical%20lab%20exm\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prediction of Air Quality in Italian Cities\n",
        "\n",
        "Identify the top 5 reasons for air quality\n",
        "Identify the Day of week with most air quality issues\n",
        "Find the max and min air quality levels\n",
        "Identify the highest and lowest temperatures of air quality\n",
        "Identify the highest educational qualification of the employees.\n",
        "Apply either Classification Model or Clustering Model to evaluate the dataset"
      ],
      "metadata": {
        "id": "fFrKwrnGVFnC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score"
      ],
      "metadata": {
        "id": "825nFpqZYV6G"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/content/AirQualityUCI.csv')"
      ],
      "metadata": {
        "id": "JgA7rLe8YaYi"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(data.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5haWf86SYemM",
        "outputId": "2e0434f8-63ee-415f-c286-f28c008c4ca7"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                                                                            Date;Time;CO(GT);PT08.S1(CO);NMHC(GT);C6H6(GT);PT08.S2(NMHC);NOx(GT);PT08.S3(NOx);NO2(GT);PT08.S4(NO2);PT08.S5(O3);T;RH;AH;;\n",
            "10/03/2004;18.00.00;2            6;1360;150;11                 9;1046;166;1056;113;1692;1268;13 6;48 9;0                                                7578;;                                                                          \n",
            "10/03/2004;19.00.00;2;1292;112;9 4;955;103;1174;92;1559;972;13 3;47                             7;0  7255;;                                                NaN                                                                          \n",
            "10/03/2004;20.00.00;2            2;1402;88;9                   0;939;131;1140;114;1555;1074;11  9;54 0;0                                                7502;;                                                                          \n",
            "10/03/2004;21.00.00;2            2;1376;80;9                   2;948;172;1092;122;1584;1203;11  0;60 0;0                                                7867;;                                                                          \n",
            "10/03/2004;22.00.00;1            6;1272;51;6                   5;836;131;1205;116;1490;1110;11  2;59 6;0                                                7888;;                                                                          \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if 'Reason' in data.columns:\n",
        "    reasons = data['Reason'].value_counts().head(5)\n",
        "    print(\"Top 5 Reasons for Air Quality Issues:\")\n",
        "    print(reasons)"
      ],
      "metadata": {
        "id": "V8Xb2NeJYmYo"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if 'Date' in data.columns:\n",
        "    data['Date'] = pd.to_datetime(data['Date'])\n",
        "    data['Day_of_Week'] = data['Date'].dt.day_name()\n",
        "    day_issues = data['Day_of_Week'].value_counts()\n",
        "    print(\"\\nDay of the Week with Most Air Quality Issues:\")\n",
        "    print(day_issues)"
      ],
      "metadata": {
        "id": "v-C-SphrYshE"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if 'Air_Quality_Index' in data.columns:\n",
        "    max_quality = data['Air_Quality_Index'].max()\n",
        "    min_quality = data['Air_Quality_Index'].min()\n",
        "    print(f\"\\nMax Air Quality Index: {max_quality}\")\n",
        "    print(f\"Min Air Quality Index: {min_quality}\")"
      ],
      "metadata": {
        "id": "udbm7P9PYweU"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if 'Temperature' in data.columns:\n",
        "    max_temp = data['Temperature'].max()\n",
        "    min_temp = data['Temperature'].min()\n",
        "    print(f\"\\nHighest Temperature: {max_temp}\")\n",
        "    print(f\"Lowest Temperature: {min_temp}\")"
      ],
      "metadata": {
        "id": "RVaVhoWtY1xP"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if 'Education' in data.columns:\n",
        "    education = data['Education'].value_counts()\n",
        "    print(\"\\nHighest Educational Qualification of Employees:\")\n",
        "    print(education)"
      ],
      "metadata": {
        "id": "FE8IL6OzY-41"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features = ['Air_Quality_Index', 'Temperature']\n",
        "if all(col in data.columns for col in features):\n",
        "    clustering_data = data[features].dropna()\n",
        "    scaler = StandardScaler()\n",
        "    scaled_data = scaler.fit_transform(clustering_data)\n",
        "\n",
        "    # K-Means Clustering\n",
        "    kmeans = KMeans(n_clusters=3, random_state=42)\n",
        "    clusters = kmeans.fit_predict(scaled_data)\n",
        "    clustering_data['Cluster'] = clusters\n",
        "\n",
        "    print(\"\\nK-Means Clustering Results:\")\n",
        "    print(clustering_data.head())"
      ],
      "metadata": {
        "id": "RjU1Ld5NZEuB"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Columns in clustering_data:\", clustering_data.columns)\n",
        "print(\"Features being used for plotting:\", features)\n",
        "clustering_data = clustering_data.dropna(subset=features + ['Cluster'])\n",
        "print(\"Shape of clustering_data after dropping NaN:\", clustering_data.shape)\n",
        "print(\"Missing data in relevant columns:\")\n",
        "print(clustering_data[features + ['Cluster']].isnull().sum())\n",
        "print(\"Shape of clustering_data:\", clustering_data.shape)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_7ioEOaZZbuw",
        "outputId": "559a1326-ac3d-491d-90bd-4ff71225a01a"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Columns in clustering_data: Index(['Air_Quality_Index', 'Temperature', 'Cluster'], dtype='object')\n",
            "Features being used for plotting: ['Air_Quality_Index', 'Temperature']\n",
            "Shape of clustering_data after dropping NaN: (0, 3)\n",
            "Missing data in relevant columns:\n",
            "Air_Quality_Index    0\n",
            "Temperature          0\n",
            "Cluster              0\n",
            "dtype: int64\n",
            "Shape of clustering_data: (0, 3)\n"
          ]
        }
      ]
    },
    {
      "source": [
        "features = ['Air_Quality_Index', 'Temperature']\n",
        "\n",
        "\n",
        "clustering_data = pd.DataFrame(columns=features + ['Cluster'])\n",
        "\n",
        "if all(col in data.columns for col in features):\n",
        "    clustering_data = data[features].dropna()\n",
        "    scaler = StandardScaler()\n",
        "    scaled_data = scaler.fit_transform(clustering_data)\n",
        "\n",
        "\n",
        "    kmeans = KMeans(n_clusters=3, random_state=42)\n",
        "    clusters = kmeans.fit_predict(scaled_data)\n",
        "    clustering_data['Cluster'] = clusters\n",
        "\n",
        "    print(\"\\nK-Means Clustering Results:\")\n",
        "    print(clustering_data.head())\n",
        "\n",
        "\n",
        "print(\"Columns in clustering_data:\", clustering_data.columns)\n",
        "print(\"Features being used for plotting:\", features)\n",
        "clustering_data = clustering_data.dropna(subset=features + ['Cluster'])\n",
        "print(\"Shape of clustering_data after dropping NaN:\", clustering_data.shape)\n",
        "print(\"Missing data in relevant columns:\")\n",
        "print(clustering_data[features + ['Cluster']].isnull().sum())\n",
        "print(\"Shape of clustering_data:\", clustering_data.shape)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eqf-BFuibjek",
        "outputId": "98710c04-6d0b-44ef-dfec-6e26b63ede37"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Columns in clustering_data: Index(['Air_Quality_Index', 'Temperature', 'Cluster'], dtype='object')\n",
            "Features being used for plotting: ['Air_Quality_Index', 'Temperature']\n",
            "Shape of clustering_data after dropping NaN: (0, 3)\n",
            "Missing data in relevant columns:\n",
            "Air_Quality_Index    0\n",
            "Temperature          0\n",
            "Cluster              0\n",
            "dtype: int64\n",
            "Shape of clustering_data: (0, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if 'Label' in data.columns:  # Assuming 'Label' contains classification targets\n",
        "    X = data.drop(['Label'], axis=1).select_dtypes(include=np.number)\n",
        "    y = data['Label']\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "    clf = RandomForestClassifier(random_state=42)\n",
        "    clf.fit(X_train, y_train)\n",
        "    y_pred = clf.predict(X_test)\n",
        "\n",
        "    print(\"\\nClassification Model Performance:\")\n",
        "    print(classification_report(y_test, y_pred))\n",
        "    print(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")"
      ],
      "metadata": {
        "id": "WGjv6zGQZelb"
      },
      "execution_count": 20,
      "outputs": []
    }
  ]
}