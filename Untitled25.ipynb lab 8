{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPK+CS50sGI5ukW6C6xM/lK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303A510J6AIML/2303A510J6AIML/blob/main/Untitled25.ipynb%20lab%208\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "E2hFLZrUqrwi"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import sklearn\n",
        "from sklearn.datasets import fetch_openml\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fetch_openml(data_id=10)"
      ],
      "metadata": {
        "id": "qC8RHW5iq1Mi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fetch_openml(name='car')"
      ],
      "metadata": {
        "id": "Y7KU3WXRq5f3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fetch_openml(data_id=5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mKEMvVuUq9F8",
        "outputId": "484218ec-4258-4f76-a19b-2a8c91ffeeb7"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'data':      age sex  height  weight  QRSduration  PRinterval  Q-Tinterval  Tinterval  \\\n",
              " 0     75   0     190      80           91         193          371        174   \n",
              " 1     56   1     165      64           81         174          401        149   \n",
              " 2     54   0     172      95          138         163          386        185   \n",
              " 3     55   0     175      94          100         202          380        179   \n",
              " 4     75   0     190      80           88         181          360        177   \n",
              " ..   ...  ..     ...     ...          ...         ...          ...        ...   \n",
              " 447   53   1     160      70           80         199          382        154   \n",
              " 448   37   0     190      85          100         137          361        201   \n",
              " 449   36   0     166      68          108         176          365        194   \n",
              " 450   32   1     155      55           93         106          386        218   \n",
              " 451   78   1     160      70           79         127          364        138   \n",
              " \n",
              "      Pinterval  QRS  ...  chV6_JJwaveAmp  chV6_QwaveAmp  chV6_RwaveAmp  \\\n",
              " 0          121  -16  ...            -0.3            0.0            9.0   \n",
              " 1           39   25  ...            -0.5            0.0            8.5   \n",
              " 2          102   96  ...             0.9            0.0            9.5   \n",
              " 3          143   28  ...             0.1            0.0           12.2   \n",
              " 4          103  -16  ...            -0.4            0.0           13.1   \n",
              " ..         ...  ...  ...             ...            ...            ...   \n",
              " 447        117  -37  ...             0.0            0.0            4.3   \n",
              " 448         73   86  ...            -0.5            0.0           15.6   \n",
              " 449        116  -85  ...             1.2            0.0           16.3   \n",
              " 450         63   54  ...             0.2           -0.4           12.0   \n",
              " 451         78   28  ...            -0.3            0.0           10.4   \n",
              " \n",
              "      chV6_SwaveAmp  chV6_RPwaveAmp  chV6_SPwaveAmp  chV6_PwaveAmp  \\\n",
              " 0             -0.9             0.0             0.0            0.9   \n",
              " 1              0.0             0.0             0.0            0.2   \n",
              " 2             -2.4             0.0             0.0            0.3   \n",
              " 3             -2.2             0.0             0.0            0.4   \n",
              " 4             -3.6             0.0             0.0           -0.1   \n",
              " ..             ...             ...             ...            ...   \n",
              " 447           -5.0             0.0             0.0            0.7   \n",
              " 448           -1.6             0.0             0.0            0.4   \n",
              " 449          -28.6             0.0             0.0            1.5   \n",
              " 450           -0.7             0.0             0.0            0.5   \n",
              " 451           -1.8             0.0             0.0            0.5   \n",
              " \n",
              "      chV6_TwaveAmp  chV6_QRSA  chV6_QRSTA  \n",
              " 0              2.9       23.3        49.4  \n",
              " 1              2.1       20.4        38.8  \n",
              " 2              3.4       12.3        49.0  \n",
              " 3              2.6       34.6        61.6  \n",
              " 4              3.9       25.4        62.8  \n",
              " ..             ...        ...         ...  \n",
              " 447            0.6       -4.4        -0.5  \n",
              " 448            2.4       38.0        62.4  \n",
              " 449            1.0      -44.2       -33.2  \n",
              " 450            2.4       25.0        46.6  \n",
              " 451            1.6       21.3        32.8  \n",
              " \n",
              " [452 rows x 279 columns],\n",
              " 'target': 0       8\n",
              " 1       6\n",
              " 2      10\n",
              " 3       1\n",
              " 4       7\n",
              "        ..\n",
              " 447     1\n",
              " 448    10\n",
              " 449     2\n",
              " 450     1\n",
              " 451     1\n",
              " Name: class, Length: 452, dtype: category\n",
              " Categories (13, object): ['1', '10', '14', '15', ..., '6', '7', '8', '9'],\n",
              " 'frame':      age sex  height  weight  QRSduration  PRinterval  Q-Tinterval  Tinterval  \\\n",
              " 0     75   0     190      80           91         193          371        174   \n",
              " 1     56   1     165      64           81         174          401        149   \n",
              " 2     54   0     172      95          138         163          386        185   \n",
              " 3     55   0     175      94          100         202          380        179   \n",
              " 4     75   0     190      80           88         181          360        177   \n",
              " ..   ...  ..     ...     ...          ...         ...          ...        ...   \n",
              " 447   53   1     160      70           80         199          382        154   \n",
              " 448   37   0     190      85          100         137          361        201   \n",
              " 449   36   0     166      68          108         176          365        194   \n",
              " 450   32   1     155      55           93         106          386        218   \n",
              " 451   78   1     160      70           79         127          364        138   \n",
              " \n",
              "      Pinterval  QRS  ...  chV6_QwaveAmp  chV6_RwaveAmp  chV6_SwaveAmp  \\\n",
              " 0          121  -16  ...            0.0            9.0           -0.9   \n",
              " 1           39   25  ...            0.0            8.5            0.0   \n",
              " 2          102   96  ...            0.0            9.5           -2.4   \n",
              " 3          143   28  ...            0.0           12.2           -2.2   \n",
              " 4          103  -16  ...            0.0           13.1           -3.6   \n",
              " ..         ...  ...  ...            ...            ...            ...   \n",
              " 447        117  -37  ...            0.0            4.3           -5.0   \n",
              " 448         73   86  ...            0.0           15.6           -1.6   \n",
              " 449        116  -85  ...            0.0           16.3          -28.6   \n",
              " 450         63   54  ...           -0.4           12.0           -0.7   \n",
              " 451         78   28  ...            0.0           10.4           -1.8   \n",
              " \n",
              "      chV6_RPwaveAmp  chV6_SPwaveAmp  chV6_PwaveAmp  chV6_TwaveAmp  chV6_QRSA  \\\n",
              " 0               0.0             0.0            0.9            2.9       23.3   \n",
              " 1               0.0             0.0            0.2            2.1       20.4   \n",
              " 2               0.0             0.0            0.3            3.4       12.3   \n",
              " 3               0.0             0.0            0.4            2.6       34.6   \n",
              " 4               0.0             0.0           -0.1            3.9       25.4   \n",
              " ..              ...             ...            ...            ...        ...   \n",
              " 447             0.0             0.0            0.7            0.6       -4.4   \n",
              " 448             0.0             0.0            0.4            2.4       38.0   \n",
              " 449             0.0             0.0            1.5            1.0      -44.2   \n",
              " 450             0.0             0.0            0.5            2.4       25.0   \n",
              " 451             0.0             0.0            0.5            1.6       21.3   \n",
              " \n",
              "      chV6_QRSTA  class  \n",
              " 0          49.4      8  \n",
              " 1          38.8      6  \n",
              " 2          49.0     10  \n",
              " 3          61.6      1  \n",
              " 4          62.8      7  \n",
              " ..          ...    ...  \n",
              " 447        -0.5      1  \n",
              " 448        62.4     10  \n",
              " 449       -33.2      2  \n",
              " 450        46.6      1  \n",
              " 451        32.8      1  \n",
              " \n",
              " [452 rows x 280 columns],\n",
              " 'categories': None,\n",
              " 'feature_names': ['age',\n",
              "  'sex',\n",
              "  'height',\n",
              "  'weight',\n",
              "  'QRSduration',\n",
              "  'PRinterval',\n",
              "  'Q-Tinterval',\n",
              "  'Tinterval',\n",
              "  'Pinterval',\n",
              "  'QRS',\n",
              "  'T',\n",
              "  'P',\n",
              "  'QRST',\n",
              "  'J',\n",
              "  'heartrate',\n",
              "  'chDI_Qwave',\n",
              "  'chDI_Rwave',\n",
              "  'chDI_Swave',\n",
              "  'chDI_RPwave',\n",
              "  'chDI_SPwave',\n",
              "  'chDI_intrinsicReflecttions',\n",
              "  'chDI_RRwaveExists',\n",
              "  'chDI_DD_RRwaveExists',\n",
              "  'chDI_RPwaveExists',\n",
              "  'chDI_DD_RPwaveExists',\n",
              "  'chDI_RTwaveExists',\n",
              "  'chDI_DD_RTwaveExists',\n",
              "  'chDII_Qwave',\n",
              "  'chDII_Rwave',\n",
              "  'chDII_Swave',\n",
              "  'chDII_RPwave',\n",
              "  'chDII_SPwave',\n",
              "  'chDII_intrinsicReflecttions',\n",
              "  'chDII_RRwaveExists',\n",
              "  'chDII_DD_RRwaveExists',\n",
              "  'chDII_RPwaveExists',\n",
              "  'chDII_DD_RPwaveExists',\n",
              "  'chDII_RTwaveExists',\n",
              "  'chDII_DD_RTwaveExists',\n",
              "  'chDIII_Qwave',\n",
              "  'chDIII_Rwave',\n",
              "  'chDIII_Swave',\n",
              "  'chDIII_RPwave',\n",
              "  'chDIII_SPwave',\n",
              "  'chDIII_intrinsicReflecttions',\n",
              "  'chDIII_RRwaveExists',\n",
              "  'chDIII_DD_RRwaveExists',\n",
              "  'chDIII_RPwaveExists',\n",
              "  'chDIII_DD_RPwaveExists',\n",
              "  'chDIII_RTwaveExists',\n",
              "  'chDIII_DD_RTwaveExists',\n",
              "  'chAVR_Qwave',\n",
              "  'chAVR_Rwave',\n",
              "  'chAVR_Swave',\n",
              "  'chAVR_RPwave',\n",
              "  'chAVR_SPwave',\n",
              "  'chAVR_intrinsicReflecttions',\n",
              "  'chAVR_RRwaveExists',\n",
              "  'chAVR_DD_RRwaveExists',\n",
              "  'chAVR_RPwaveExists',\n",
              "  'chAVR_DD_RPwaveExists',\n",
              "  'chAVR_RTwaveExists',\n",
              "  'chAVR_DD_RTwaveExists',\n",
              "  'chAVL_Qwave',\n",
              "  'chAVL_Rwave',\n",
              "  'chAVL_Swave',\n",
              "  'chAVL_RPwave',\n",
              "  'chAVL_SPwave',\n",
              "  'chAVL_intrinsicReflecttions',\n",
              "  'chAVL_RRwaveExists',\n",
              "  'chAVL_DD_RRwaveExists',\n",
              "  'chAVL_RPwaveExists',\n",
              "  'chAVL_DD_RPwaveExists',\n",
              "  'chAVL_RTwaveExists',\n",
              "  'chAVL_DD_RTwaveExists',\n",
              "  'chAVF_Qwave',\n",
              "  'chAVF_Rwave',\n",
              "  'chAVF_Swave',\n",
              "  'chAVF_RPwave',\n",
              "  'chAVF_SPwave',\n",
              "  'chAVF_intrinsicReflecttions',\n",
              "  'chAVF_RRwaveExists',\n",
              "  'chAVF_DD_RRwaveExists',\n",
              "  'chAVF_RPwaveExists',\n",
              "  'chAVF_DD_RPwaveExists',\n",
              "  'chAVF_RTwaveExists',\n",
              "  'chAVF_DD_RTwaveExists',\n",
              "  'chV1_Qwave',\n",
              "  'chV1_Rwave',\n",
              "  'chV1_Swave',\n",
              "  'chV1_RPwave',\n",
              "  'chV1_SPwave',\n",
              "  'chV1_intrinsicReflecttions',\n",
              "  'chV1_RRwaveExists',\n",
              "  'chV1_DD_RRwaveExists',\n",
              "  'chV1_RPwaveExists',\n",
              "  'chV1_DD_RPwaveExists',\n",
              "  'chV1_RTwaveExists',\n",
              "  'chV1_DD_RTwaveExists',\n",
              "  'chV2_Qwave',\n",
              "  'chV2_Rwave',\n",
              "  'chV2_Swave',\n",
              "  'chV2_RPwave',\n",
              "  'chV2_SPwave',\n",
              "  'chV2_intrinsicReflecttions',\n",
              "  'chV2_RRwaveExists',\n",
              "  'chV2_DD_RRwaveExists',\n",
              "  'chV2_RPwaveExists',\n",
              "  'chV2_DD_RPwaveExists',\n",
              "  'chV2_RTwaveExists',\n",
              "  'chV2_DD_RTwaveExists',\n",
              "  'chV3_Qwave',\n",
              "  'chV3_Rwave',\n",
              "  'chV3_Swave',\n",
              "  'chV3_RPwave',\n",
              "  'chV3_SPwave',\n",
              "  'chV3_intrinsicReflecttions',\n",
              "  'chV3_RRwaveExists',\n",
              "  'chV3_DD_RRwaveExists',\n",
              "  'chV3_RPwaveExists',\n",
              "  'chV3_DD_RPwaveExists',\n",
              "  'chV3_RTwaveExists',\n",
              "  'chV3_DD_RTwaveExists',\n",
              "  'chV4_Qwave',\n",
              "  'chV4_Rwave',\n",
              "  'chV4_Swave',\n",
              "  'chV4_RPwave',\n",
              "  'chV4_SPwave',\n",
              "  'chV4_intrinsicReflecttions',\n",
              "  'chV4_RRwaveExists',\n",
              "  'chV4_DD_RRwaveExists',\n",
              "  'chV4_RPwaveExists',\n",
              "  'chV4_DD_RPwaveExists',\n",
              "  'chV4_RTwaveExists',\n",
              "  'chV4_DD_RTwaveExists',\n",
              "  'chV5_Qwave',\n",
              "  'chV5_Rwave',\n",
              "  'chV5_Swave',\n",
              "  'chV5_RPwave',\n",
              "  'chV5_SPwave',\n",
              "  'chV5_intrinsicReflecttions',\n",
              "  'chV5_RRwaveExists',\n",
              "  'chV5_DD_RRwaveExists',\n",
              "  'chV5_RPwaveExists',\n",
              "  'chV5_DD_RPwaveExists',\n",
              "  'chV5_RTwaveExists',\n",
              "  'chV5_DD_RTwaveExists',\n",
              "  'chV6_Qwave',\n",
              "  'chV6_Rwave',\n",
              "  'chV6_Swave',\n",
              "  'chV6_RPwave',\n",
              "  'chV6_SPwave',\n",
              "  'chV6_intrinsicReflecttions',\n",
              "  'chV6_RRwaveExists',\n",
              "  'chV6_DD_RRwaveExists',\n",
              "  'chV6_RPwaveExists',\n",
              "  'chV6_DD_RPwaveExists',\n",
              "  'chV6_RTwaveExists',\n",
              "  'chV6_DD_RTwaveExists',\n",
              "  'chDI_JJwaveAmp',\n",
              "  'chDI_QwaveAmp',\n",
              "  'chDI_RwaveAmp',\n",
              "  'chDI_SwaveAmp',\n",
              "  'chDI_RPwaveAmp',\n",
              "  'chDI_SPwaveAmp',\n",
              "  'chDI_PwaveAmp',\n",
              "  'chDI_TwaveAmp',\n",
              "  'chDI_QRSA',\n",
              "  'chDI_QRSTA',\n",
              "  'chDII_JJwaveAmp',\n",
              "  'chDII_QwaveAmp',\n",
              "  'chDII_RwaveAmp',\n",
              "  'chDII_SwaveAmp',\n",
              "  'chDII_RPwaveAmp',\n",
              "  'chDII_SPwaveAmp',\n",
              "  'chDII_PwaveAmp',\n",
              "  'chDII_TwaveAmp',\n",
              "  'chDII_QRSA',\n",
              "  'chDII_QRSTA',\n",
              "  'chDIII_JJwaveAmp',\n",
              "  'chDIII_QwaveAmp',\n",
              "  'chDIII_RwaveAmp',\n",
              "  'chDIII_SwaveAmp',\n",
              "  'chDIII_RPwaveAmp',\n",
              "  'chDIII_SPwaveAmp',\n",
              "  'chDIII_PwaveAmp',\n",
              "  'chDIII_TwaveAmp',\n",
              "  'chDIII_QRSA',\n",
              "  'chDIII_QRSTA',\n",
              "  'chAVR_JJwaveAmp',\n",
              "  'chAVR_QwaveAmp',\n",
              "  'chAVR_RwaveAmp',\n",
              "  'chAVR_SwaveAmp',\n",
              "  'chAVR_RPwaveAmp',\n",
              "  'chAVR_SPwaveAmp',\n",
              "  'chAVR_PwaveAmp',\n",
              "  'chAVR_TwaveAmp',\n",
              "  'chAVR_QRSA',\n",
              "  'chAVR_QRSTA',\n",
              "  'chAVL_JJwaveAmp',\n",
              "  'chAVL_QwaveAmp',\n",
              "  'chAVL_RwaveAmp',\n",
              "  'chAVL_SwaveAmp',\n",
              "  'chAVL_RPwaveAmp',\n",
              "  'chAVL_SPwaveAmp',\n",
              "  'chAVL_PwaveAmp',\n",
              "  'chAVL_TwaveAmp',\n",
              "  'chAVL_QRSA',\n",
              "  'chAVL_QRSTA',\n",
              "  'chAVF_JJwaveAmp',\n",
              "  'chAVF_QwaveAmp',\n",
              "  'chAVF_RwaveAmp',\n",
              "  'chAVF_SwaveAmp',\n",
              "  'chAVF_RPwaveAmp',\n",
              "  'chAVF_SPwaveAmp',\n",
              "  'chAVF_PwaveAmp',\n",
              "  'chAVF_TwaveAmp',\n",
              "  'chAVF_QRSA',\n",
              "  'chAVF_QRSTA',\n",
              "  'chV1_JJwaveAmp',\n",
              "  'chV1_QwaveAmp',\n",
              "  'chV1_RwaveAmp',\n",
              "  'chV1_SwaveAmp',\n",
              "  'chV1_RPwaveAmp',\n",
              "  'chV1_SPwaveAmp',\n",
              "  'chV1_PwaveAmp',\n",
              "  'chV1_TwaveAmp',\n",
              "  'chV1_QRSA',\n",
              "  'chV1_QRSTA',\n",
              "  'chV2_JJwaveAmp',\n",
              "  'chV2_QwaveAmp',\n",
              "  'chV2_RwaveAmp',\n",
              "  'chV2_SwaveAmp',\n",
              "  'chV2_RPwaveAmp',\n",
              "  'chV2_SPwaveAmp',\n",
              "  'chV2_PwaveAmp',\n",
              "  'chV2_TwaveAmp',\n",
              "  'chV2_QRSA',\n",
              "  'chV2_QRSTA',\n",
              "  'chV3_JJwaveAmp',\n",
              "  'chV3_QwaveAmp',\n",
              "  'chV3_RwaveAmp',\n",
              "  'chV3_SwaveAmp',\n",
              "  'chV3_RPwaveAmp',\n",
              "  'chV3_SPwaveAmp',\n",
              "  'chV3_PwaveAmp',\n",
              "  'chV3_TwaveAmp',\n",
              "  'chV3_QRSA',\n",
              "  'chV3_QRSTA',\n",
              "  'chV4_JJwaveAmp',\n",
              "  'chV4_QwaveAmp',\n",
              "  'chV4_RwaveAmp',\n",
              "  'chV4_SwaveAmp',\n",
              "  'chV4_RPwaveAmp',\n",
              "  'chV4_SPwaveAmp',\n",
              "  'chV4_PwaveAmp',\n",
              "  'chV4_TwaveAmp',\n",
              "  'chV4_QRSA',\n",
              "  'chV4_QRSTA',\n",
              "  'chV5_JJwaveAmp',\n",
              "  'chV5_QwaveAmp',\n",
              "  'chV5_RwaveAmp',\n",
              "  'chV5_SwaveAmp',\n",
              "  'chV5_RPwaveAmp',\n",
              "  'chV5_SPwaveAmp',\n",
              "  'chV5_PwaveAmp',\n",
              "  'chV5_TwaveAmp',\n",
              "  'chV5_QRSA',\n",
              "  'chV5_QRSTA',\n",
              "  'chV6_JJwaveAmp',\n",
              "  'chV6_QwaveAmp',\n",
              "  'chV6_RwaveAmp',\n",
              "  'chV6_SwaveAmp',\n",
              "  'chV6_RPwaveAmp',\n",
              "  'chV6_SPwaveAmp',\n",
              "  'chV6_PwaveAmp',\n",
              "  'chV6_TwaveAmp',\n",
              "  'chV6_QRSA',\n",
              "  'chV6_QRSTA'],\n",
              " 'target_names': ['class'],\n",
              " 'DESCR': '**Author**: H. Altay Guvenir, Burak Acar, Haldun Muderrisoglu  \\n**Source**: [UCI](https://archive.ics.uci.edu/ml/datasets/arrhythmia)   \\n**Please cite**: [UCI](https://archive.ics.uci.edu/ml/citation_policy.html)\\n\\n**Cardiac Arrhythmia Database**  \\nThe aim is to determine the type of arrhythmia from the ECG recordings. This database contains 279 attributes, 206 of which are linear valued and the rest are nominal. \\n\\nConcerning the study of H. Altay Guvenir: \"The aim is to distinguish between the presence and absence of cardiac arrhythmia and to classify it in one of the 16 groups. Class 01 refers to \\'normal\\' ECG classes, 02 to 15 refers to different classes of arrhythmia and class 16 refers to the rest of unclassified ones. For the time being, there exists a computer program that makes such a classification. However, there are differences between the cardiologist\\'s and the program\\'s classification. Taking the cardiologist\\'s as a gold standard we aim to minimize this difference by means of machine learning tools.\\n \\nThe names and id numbers of the patients were recently removed from the database.\\n \\n### Attribute Information  \\n \\n       1 Age: Age in years , linear\\n       2 Sex: Sex (0 = male; 1 = female) , nominal\\n       3 Height: Height in centimeters , linear\\n       4 Weight: Weight in kilograms , linear\\n       5 QRS duration: Average of QRS duration in msec., linear\\n       6 P-R interval: Average duration between onset of P and Q waves\\n         in msec., linear\\n       7 Q-T interval: Average duration between onset of Q and offset\\n         of T waves in msec., linear\\n       8 T interval: Average duration of T wave in msec., linear\\n       9 P interval: Average duration of P wave in msec., linear\\n      Vector angles in degrees on front plane of:, linear\\n      10 QRS\\n      11 T\\n      12 P\\n      13 QRST\\n      14 J\\n      15 Heart rate: Number of heart beats per minute ,linear\\n      Of channel DI:\\n       Average width, in msec., of: linear\\n       16 Q wave\\n       17 R wave\\n       18 S wave\\n       19 R\\' wave, small peak just after R\\n       20 S\\' wave\\n       21 Number of intrinsic deflections, linear\\n       22 Existence of ragged R wave, nominal\\n       23 Existence of diphasic derivation of R wave, nominal\\n       24 Existence of ragged P wave, nominal\\n       25 Existence of diphasic derivation of P wave, nominal\\n       26 Existence of ragged T wave, nominal\\n       27 Existence of diphasic derivation of T wave, nominal\\n      Of channel DII: \\n       28 .. 39 (similar to 16 .. 27 of channel DI)\\n      Of channels DIII:\\n       40 .. 51\\n      Of channel AVR:\\n       52 .. 63\\n      Of channel AVL:\\n       64 .. 75\\n      Of channel AVF:\\n       76 .. 87\\n      Of channel V1:\\n       88 .. 99\\n      Of channel V2:\\n       100 .. 111\\n      Of channel V3:\\n       112 .. 123\\n      Of channel V4:\\n       124 .. 135\\n      Of channel V5:\\n       136 .. 147\\n      Of channel V6:\\n       148 .. 159\\n      Of channel DI:\\n       Amplitude , * 0.1 milivolt, of\\n       160 JJ wave, linear\\n       161 Q wave, linear\\n       162 R wave, linear\\n       163 S wave, linear\\n       164 R\\' wave, linear\\n       165 S\\' wave, linear\\n       166 P wave, linear\\n       167 T wave, linear\\n       168 QRSA , Sum of areas of all segments divided by 10,\\n           ( Area= width * height / 2 ), linear\\n       169 QRSTA = QRSA + 0.5 * width of T wave * 0.1 * height of T\\n           wave. (If T is diphasic then the bigger segment is\\n           considered), linear\\n      Of channel DII:\\n       170 .. 179\\n      Of channel DIII:\\n       180 .. 189\\n      Of channel AVR:\\n       190 .. 199\\n      Of channel AVL:\\n       200 .. 209\\n      Of channel AVF:\\n       210 .. 219\\n      Of channel V1:\\n       220 .. 229\\n      Of channel V2:\\n       230 .. 239\\n      Of channel V3:\\n       240 .. 249\\n      Of channel V4:\\n       250 .. 259\\n      Of channel V5:\\n       260 .. 269\\n      Of channel V6:\\n       270 .. 279\\n        \\nClass code - class - number of instances:\\n> \\n        01             Normal                245\\n        02             Ischemic changes (Coronary Artery Disease)   44\\n        03             Old Anterior Myocardial Infarction           15\\n        04             Old Inferior Myocardial Infarction           15\\n        05             Sinus tachycardy        13\\n        06             Sinus bradycardy        25\\n        07             Ventricular Premature Contraction (PVC)       3\\n        08             Supraventricular Premature Contraction       2\\n        09             Left bundle branch block         9 \\n        10             Right bundle branch block       50\\n        11             1. degree AtrioVentricular block       0 \\n        12             2. degree AV block                0\\n        13             3. degree AV block                0\\n        14             Left ventricule hypertrophy                4\\n        15             Atrial Fibrillation or Flutter               5\\n        16             Others                 22\\n\\nDownloaded from openml.org.',\n",
              " 'details': {'id': '5',\n",
              "  'name': 'arrhythmia',\n",
              "  'version': '1',\n",
              "  'description_version': '2',\n",
              "  'format': 'ARFF',\n",
              "  'creator': ['H. Altay Guvenir', 'Burak Acar', 'Haldun Muderrisoglu'],\n",
              "  'collection_date': '1998-01-01',\n",
              "  'upload_date': '2014-04-06T23:19:36',\n",
              "  'licence': 'Public',\n",
              "  'url': 'https://api.openml.org/data/v1/download/5/arrhythmia.arff',\n",
              "  'parquet_url': 'https://openml1.win.tue.nl/datasets/0000/0005/dataset_5.pq',\n",
              "  'file_id': '5',\n",
              "  'default_target_attribute': 'class',\n",
              "  'version_label': '1',\n",
              "  'citation': 'https://archive.ics.uci.edu/ml/citation_policy.html',\n",
              "  'tag': ['Machine Learning',\n",
              "   'Medicine',\n",
              "   'sport',\n",
              "   'study_1',\n",
              "   'study_41',\n",
              "   'study_76',\n",
              "   'study_93',\n",
              "   'uci'],\n",
              "  'visibility': 'public',\n",
              "  'original_data_url': 'https://archive.ics.uci.edu/ml/datasets/arrhythmia',\n",
              "  'minio_url': 'https://openml1.win.tue.nl/datasets/0000/0005/dataset_5.pq',\n",
              "  'status': 'active',\n",
              "  'processing_date': '2020-11-20 19:32:17',\n",
              "  'md5_checksum': '16b2e6fb5105155638cde38b2d117fac'},\n",
              " 'url': 'https://www.openml.org/d/5'}"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Loading the data"
      ],
      "metadata": {
        "id": "yUSh8wP5tHFi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import fetch_openml\n",
        "car_data=fetch_openml(name='car',version=2,parser='auto')"
      ],
      "metadata": {
        "id": "HGlNPTf4rPsS"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "type(car_data)"
      ],
      "metadata": {
        "id": "iHlhuakirUUG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_data.details"
      ],
      "metadata": {
        "id": "YfmXC5_ZrXZf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_data.keys()"
      ],
      "metadata": {
        "id": "x7nbUZsIrZ90"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_data.details['version']"
      ],
      "metadata": {
        "id": "m9NMfX9SrfLz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_data.feature_names,car_data.target,car_data.categories"
      ],
      "metadata": {
        "id": "6wM5_Kr7rizt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_data.target.value_counts()"
      ],
      "metadata": {
        "id": "DomlYixdrl1L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_data=car_data.frame\n",
        "car_data.head()"
      ],
      "metadata": {
        "id": "27-pCo3brp4j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_data=car_data.frame\n",
        "car_data.head"
      ],
      "metadata": {
        "id": "d_H97Deprsx9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Splitting data into training and test sets"
      ],
      "metadata": {
        "id": "aBqFr9vEtQD2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=car_data.binaryClass,hue='persons',data=car_data,palette='rainbow')"
      ],
      "metadata": {
        "id": "m80k_2BGrwYj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=car_data.binaryClass,hue='doors',data=car_data,palette='rainbow')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "id": "J2LcJOvdr1XK",
        "outputId": "5fdf2268-0c12-41a4-ef34-b78819c84c5d"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "binaryClass",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_bunch.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m     53\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     55\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_bunch.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m     38\u001b[0m             )\n\u001b[0;32m---> 39\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'binaryClass'",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-070a14caf84f>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcountplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcar_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbinaryClass\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mhue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'doors'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcar_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpalette\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'rainbow'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_bunch.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 56\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setstate__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: binaryClass"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "train_data,test_data=train_test_split(car_data,test_size=0.2,random_state=20)\n",
        "print(\"Training data is: {}\\n testing data is: {}\".format(len(train_data),len(test_data)))"
      ],
      "metadata": {
        "id": "bOSgw0eKr46H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Fmjl82xzshq4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "label_enc=LabelEncoder()\n",
        "car_labels_prepared=label_enc.fit_transform(car_lables)"
      ],
      "metadata": {
        "id": "pNx_0sAGr7zq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_train_prepared.shape,car_labels_prepared.shape"
      ],
      "metadata": {
        "id": "3T1mjNtZr-gN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Training decision tree classifier"
      ],
      "metadata": {
        "id": "mNenx2irsn16"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "tree_clf=DecisionTreeClassifier()\n",
        "tree_clf.fit(car_train_prepared,car_labels_prepared)"
      ],
      "metadata": {
        "id": "o7pSZi8ssBTy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import export_text\n",
        "text_representation=export_text(tree_clf,feature_names=list(car_train.columns))\n",
        "print(text_representation)\n",
        "text_representation.plot_tree(car_train,car_labels)"
      ],
      "metadata": {
        "id": "x1KgcVPGsDrn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Evaluation of Metrics\n"
      ],
      "metadata": {
        "id": "ht9vShaFsOmu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n",
        "preds=tree_clf.predict(car_train_prepared)\n",
        "print(f\"Accuracy:{accuracy_score(car_labels_prepared,preds)}\")\n",
        "print(f\"ClassReport:{classification_report(car_labels_prepared,preds)}\")\n",
        "print(f\"Confusuion Matrix:{confusion_matrix(car_labels_prepared,preds)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "uvAfWxjGsGqP",
        "outputId": "6c793d61-40ae-47ce-f308-65521b4cd4f8"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'tree_clf' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-0acb5012b90f>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mclassification_report\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mpreds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtree_clf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcar_train_prepared\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Accuracy:{accuracy_score(car_labels_prepared,preds)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"ClassReport:{classification_report(car_labels_prepared,preds)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Confusuion Matrix:{confusion_matrix(car_labels_prepared,preds)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'tree_clf' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report"
      ],
      "metadata": {
        "id": "2pb6jNXwsJEq"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}